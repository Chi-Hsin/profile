<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[對話框Enter的預設行為]]></title>
    <url>%2Fprofile%2F%E5%B0%8D%E8%A9%B1%E6%A1%86Enter%E7%9A%84%E9%A0%90%E8%A8%AD%E8%A1%8C%E7%82%BA%2F</url>
    <content type="text"><![CDATA[--- title: 對話框Enter的預設行為 date: 2018-07-013 07:56:37 tags: - 筆記 - javascript - Jquery --- 在對話輸入的地方 Enter常常是預設輸入的行為 也就是說 按Enter可以直接將訊息送出去 但如果是Input 的標籤 雖然可以輸入東西 但是只能輸入一行 另外又有textarea可以用 但又不是我們需要的 於是我們可以將這個對話欄區塊直接改成div標籤 只需要另外加上一個屬性 {% asset_img 1.jpg %} 可是問題又來了 他按Enter會變成跳行 而不是送出訊息 應該怎麼讓它Enter改成送出的動作 如果換行可以用像是「Shift+Enter」去做呢? $("#input_area").on('keydown', function(e)//輸入對話欄 { if(e.key == "Enter" && e.target.value != "") { if(e.shiftKey)//換行 { } else { $("#msg_send").click(); e.preventDefault(); } } }); 寫個按鈕送出訊息事件 可以克服這個問題 另外需要辨識Enter鍵還有Shift鍵的shiftKey 這邊K有大寫 屬於駝峰式的寫法要注意 Enter直接執行送出按鈕的事件(事前送出按鈕已經有另外綁定了onclick事件) {% asset_img 2.jpg %} e.preventDefault()讓它不去做預設動作 也就是取消了它原本「按Enter會換行」這件事 這樣就是我們常常看到的 按Enter送出訊息 按Shift+Enter可以換行而不會直接送出 這樣比較直覺的操作了 {% asset_img 3.jpg %}]]></content>
      <tags>
        <tag>筆記</tag>
        <tag>javascript</tag>
        <tag>Jquery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JSON物件的取值]]></title>
    <url>%2Fprofile%2FJSON%E7%89%A9%E4%BB%B6%E7%9A%84%E5%8F%96%E5%80%BC%2F</url>
    <content type="text"><![CDATA[--- title: JSON物件的取值 date: 2018-07-13 07:56:37 tags: - 筆記 - javascript --- 假使一個物件 var obj = { first: { name: "John", job: "student" }, second: { name: "Mary", job: "teacher" } }; 我們如果想取John這個值 可以用obj["first"].name 或者轉成key的形式取 obj[Object.keys(obj)[0]].name 但是以下錯誤方式是不支援的 obj[0].name 原因在於JSON並非屬於陣列的形式 單純的數字索引沒有辦法做到這一點]]></content>
      <tags>
        <tag>筆記</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jquery的find]]></title>
    <url>%2Fprofile%2FJquery%E7%9A%84find%2F</url>
    <content type="text"><![CDATA[--- title: Jquery的find date: 2018-07-13 07:56:37 tags: - 筆記 - Jquery --- 再Jquery當中 我們要選一個元素 會用選擇器的方式選取 例如$(".box")選擇class="box"的元素 $(".box #aaa")選擇box裏頭的子元素aaa 那find有什麼作用呢? 相同的情況下 用上述的選擇器達成不就好了嗎? 恩.....在某些情況下 可能會有以下需求 $(".box") .attr("src",$(".box2").attr("src")) .show() .find("#aaa") .hide() .parent() .find("#bbb").html("123") .show() 然後也可以一直點下去這樣鏈接chain的方式書寫 就不用再多寫幾行重複的了 ~~ˋ要知道工程師是很懶的一種生物~~]]></content>
      <tags>
        <tag>筆記</tag>
        <tag>Jquery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[動態產生的物件綁定事件]]></title>
    <url>%2Fprofile%2F%E5%8B%95%E6%85%8B%E7%94%A2%E7%94%9F%E7%9A%84%E7%89%A9%E4%BB%B6%E7%B6%81%E5%AE%9A%E4%BA%8B%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[--- title: 動態產生的物件綁定事件 date: 2018-07-13 07:56:37 tags: - 筆記 - javascript - Jquery --- 假使今天我們有一個按鈕 綁定了click事件 也就是說按下去彈出一個提醒視窗 但是 假如我們動態產生了一些按鈕 那要怎麼給他也賦予這個事件呢? {% asset_img 1.jpg %} 我們發現add產生出來的button都沒有效果 這時候 就必須在動態產生的時候就綁定起來 {% asset_img 2.jpg %} 那有沒有更方便的方法呢? Jquery提供了on可以使用 {% asset_img 3.jpg %} 第二個參數放上我們要監聽的目標 動態產生時 就自動賦予綁定事件 是不是很方便呢?]]></content>
      <tags>
        <tag>筆記</tag>
        <tag>javascript</tag>
        <tag>Jquery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[變數作用域]]></title>
    <url>%2Fprofile%2F%E8%AE%8A%E6%95%B8%E4%BD%9C%E7%94%A8%E5%9F%9F%2F</url>
    <content type="text"><![CDATA[--- title: 變數作用域 date: 2018-07-013 07:56:37 tags: - 筆記 - javascript - Jquery --- 在Jquery中 由$(function(){}) //也就是document.ready的簡寫 包起來的作用域 裏頭的變數被包起來 所以裡面定義的變數 只能在裡面用 我們先看一個例子 {% asset_img 1.jpg %} 但是如果直接定義在裡面 {% asset_img 2.jpg %} 如果要避免這個問題 可以把變數寫在全域也就是(圖一)那樣 或者另外用localStorage.setItem()存起來 存在對應的鍵值 注意,只接受字串,如果不是字串可以借用JSON序列化或反序列化 也就是JSON.stringify()存進去 localStorage.getItem()拿出來時 再JSON.parse()轉回來]]></content>
      <tags>
        <tag>筆記</tag>
        <tag>javascript</tag>
        <tag>Jquery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript中的append]]></title>
    <url>%2Fprofile%2Fjavascript%E4%B8%AD%E7%9A%84append%2F</url>
    <content type="text"><![CDATA[--- title: javascript中的append date: 2018-07-013 07:56:37 tags: - 筆記 - javascript --- 無論是在Jquery還是javascript 用append或appendChild都要小心 以下看一個例子 $(function(){ $("#test2").append($("#test1").find("#box")) }) #box{background:red;width:50px;height:50px;} .test{border:1px solid #000;margin:0 0 30px 0;} 123 id:test1的元素將會跑到test2哦! {% asset_img 1.jpg %} {% asset_img 2.jpg %} --- 要如何避免這種問題呢? 因為append本來就是這種功能 可以另外document.createElement {% asset_img 3.jpg %}]]></content>
      <tags>
        <tag>筆記</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[隨機產生圖片]]></title>
    <url>%2Fprofile%2F%E9%9A%A8%E6%A9%9F%E7%94%A2%E7%94%9F%E5%9C%96%E7%89%87%2F</url>
    <content type="text"><![CDATA[--- title: 隨機產生圖片 date: 2018-07-06 07:56:37 tags: - 筆記 - javascript - php --- 使用後端語言:PHP 使用前端語言:javascript 環境:能解析PHP(看懂)的作業系統 主題:產生隨機圖片的小作品(迷你版) {% asset_img 1.jpg %} 大致上的做法是HTML跑完後 加載PHP後端的script 接著依據這些資料呈現圖片 *** 其中一個是我們跑的index.php 另外一個網頁是就純PHP echo出資料而已 對 就這樣 {% asset_img 2.jpg %} 用JSONP的方式 將PHP用script的方式加載進來 雖然說是JSONP這種陌生的名詞 但它並非新技術 而是一種運用而已 特別要注意的是 {% asset_img 3.jpg %} 這裡綁定的方法 第二個參數是放函數名稱 也就是只要寫上click_sth就好囉~ 接下來我們直接跳到~~程式碼比較短~~的PHP檔案 {% asset_img 4.jpg %} 我們直接用glob去找該檔案底下的所有資料 因為我們要的只是圖片 所以用了正則表達式判斷 {% asset_img 5.jpg %} 如果正確再加進來我們要的資料 注意如果有/根目錄路徑要再加上\反斜線 png和jpg像這樣的邏輯判斷 中間也不能有空白 會判斷錯誤哦 $則是以前面這個JPG或PNG結尾 {% asset_img 6.jpg %} 第二種情況是如果我們目錄底下又有子目錄(因為它不符合剛剛的正則式判斷) 就在運用剛剛相同的方法 再去把檔案加進來 {% asset_img 7.jpg %} 最後把這個東西echo 起來就好了 因為它是PHP的物件 所以必須用JSON轉換讓其他語言能看懂這是什麼 至於myJSON()就是我們寫在script裏頭的函式 myJSON()是在做什麼呢? 我們回到原先第一個網頁index.pgp *** {% asset_img 8.jpg %} 我們利用Math函式庫裏頭的random()再加上一些數值的運算產生隨機數 接著產生一個新的img元素 放在我們id為test_img的區塊裡頭 接下來我們也在圖片上綁定可以點擊更換圖片的方法 {% asset_img 9.jpg %} 在append之後會返回JQUERY的對象 也就是說 我們在append之後可以再用find去找他底下的子元素 形成這樣的一個很好看的鏈 由於PHP echo myJSON 相當於在script執行了這個函式 把array參數帶進來 那我們這時候就要想辦法保存這個資料 如果以後需要再用到 可以直接提取 就不用每次都跟資料庫或者需要另外做其他事獲取資料 這樣將有助於提升執行的效率 我們可以用localStorage儲存起來 再存取之前 要先把它字串轉換也就是JSON.stringify() 接下來就是最後一個函式click_sth()用來換圖片用的 我們把localStorage存的東西提取出來之後 用JSON.parse解析出原本那個物件 用同樣的方法換照片 {% asset_img 10.jpg %} 接著固定時間換照片就可以了setInterval 一樣也是調用click_sth 也就是click_sth這個函式被重複利用了三次 *** {% asset_img 11.jpg %} 我們來簡單講一下CSS 其中id為test_img這個區塊 想要置中 就直接用margin:auto就行了 裡面還會放圖片 可是你會發現圖片為什麼用margin:auto卻不能置中? {% asset_img 12.jpg %} 那是因為沒有轉換成display:block的緣故 圖片預設是display:inline-block 至於如果要達到垂直置中 最簡單的方法 是用position的方式 直接讓img絕對定位下去做 需要注意的是 他的上一層也必須跟著定位(相對位置) 這樣img才會只在test_img這個區塊裡面做相對位置的變換 CSS裡max與min的寬高設定 如果運用得當 可以再不壓縮圖片與用JS的情況下 讓圖片產生想要的效果 {% asset_img 13.jpg %} 雖然有些圖片還會壓到 但是你不需要再用JS去轉換寬高什麼的 CSS會自動幫你調校 這是最簡單的方法 [以下為連結網頁](http://jack.lionfree.net/game/random_pic/ "Title")]]></content>
      <tags>
        <tag>筆記</tag>
        <tag>javascript</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[陣列中的元素總和測試]]></title>
    <url>%2Fprofile%2F%E9%99%A3%E5%88%97%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0%E7%B8%BD%E5%92%8C%E6%B8%AC%E8%A9%A6%2F</url>
    <content type="text"><![CDATA[--- title: 陣列中的元素總和測試 date: 2018-07-05 07:56:37 tags: - 筆記 - javascript --- 使用前端語言:javascript === {% asset_img 0.jpg %} 做完一臉茫然...也不曉得這樣好不好 不過做就對了 算是簡易的試做 程式碼如下 $(function(){ var arr = [1,2,3,3,2,1]; $("#test").html("陣列為"+arr+"區間總合為六的有:"); for(var i=0;i> break是跳出整個迴圈 for(var i=0;i> continue則是跳出這個階段 直接進行下一個迴圈 for(var i=0;i]]></content>
      <tags>
        <tag>筆記</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[瀏覽器速度與Rendering tree]]></title>
    <url>%2Fprofile%2F%E7%80%8F%E8%A6%BD%E5%99%A8%E9%80%9F%E5%BA%A6%E8%88%87Rendering%20tree%2F</url>
    <content type="text"><![CDATA[--- title: 瀏覽器速度與Rendering tree date: 2018-06-16 10:56:37 tags: - 筆記 --- 最近在學瀏覽器的渲染過程 我們每一次滑動 瀏覽器都在做Frame(禎) 通常人眼可以辨識的速度是 60禎/秒 也就是每個Frame要在1/60秒 也就是16.66毫秒內完成 但通常瀏覽器還有其他工作要做 所以必須大約在10ms就要做好這個Frame 而一個Frame包含了DOM元素和CSS規則形成的渲染樹 也就是Rendering tree 這個Rendering tree簡單來講就是 我們畫面上看到的東西 像是h1 div p...等Dom元素 其中before after的偽元素儘管不在DOM裏頭 也被包含在渲染樹裡 而看不到的 像是display:none的樣式的元素就不在裏頭 {% asset_img 1.jpg 渲染樹概念示意圖 %} 而每個Frame在製作的過程(我們每次的滑動裡頭) 大約是 Javascript執行 然後依照CSS的樣式規則建構渲染樹 接下來染色之後有了這個佈局(layout) 然後Paint(繪製)畫出來 接著把這些部分組合起來拼裝(Composite) 印在瀏覽器上 其中圖片的部分是用dotmap組合而成 可以看成是很多個小點 最後像拼圖一樣拚上去 {% asset_img 2.jpg 染色片示意圖 %} 為什麼要說這個呢? 我們大概來看一下IE瀏覽器跟Chrome瀏覽器在瀏覽 比較複雜的網頁時 的速度 其中你可以看到IE的速度 會卡(英文shutter 掉禎) 這樣即使很好的網站 也會極大的影響使用者觀看 IE --- {% asset_img 3.gif IE瀏覽器滑動測試 %} Chrome --- {% asset_img 4.gif Chrome瀏覽器滑動測試 %} 而有些CSS的樣式 如width,height 就會影響到佈局 進而影響到繪製 就是要瀏覽器重畫這個frame 而有些CSS的樣式 如background color 這些只會影響到顏色的部分 不會對佈局造成影響 但是需要重畫(Paint) 基於這樣的概念 可以對瀏覽器速度有個比較基礎的認知]]></content>
      <tags>
        <tag>筆記</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Promise承諾]]></title>
    <url>%2Fprofile%2FPromise%E6%89%BF%E8%AB%BE%2F</url>
    <content type="text"><![CDATA[--- title: Promise承諾 date: 2018-06-12 10:56:37 tags: - 筆記 --- 異步的要求執行 可以讓部分的頁面刷新 不需要讓整個葉面刷新再跑一遍 所以開始會有大量需要異步請求的需求 而有些異步請求Ajax執行完也會回調其他異步請求 達成層層嵌套 但是 如果像下面這樣 可能就要考慮 是否有其他更好的表達方式 {% asset_img 1.jpg %} 先創建一個需要被執行的異步請求函數 function test(resolve,reject) { console.log("123") resolve("執行成功"); } 建立一個新的Promise對象 var pr1 = new Promise(test); 接著是想要在test執行成功後 可以在執行另一個異步請求 function test2(msg) { return new Promise(function(resolve,reject){ console.log(msg); }) } pr1.then(test2); Promise對象在執行test成功後 將Paddimg狀態(也就是進行中)切換成resolve狀態 這個resolve代表Promise的一個方法 我在進行test成功後 回調函式resolve resolve裡面的值也會傳到下面要執行的函數test2(藉由參數msg) 接著繼續執行test2的內容 如果失敗 則回調函式reject 之後就是Promise的鏈 new Promise(test) .then(test2) .then(test3) .then(test4) 類似長這樣]]></content>
      <tags>
        <tag>筆記</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[原型繼承篇]]></title>
    <url>%2Fprofile%2F%E5%8E%9F%E5%9E%8B%E7%B9%BC%E6%89%BF%E7%AF%87%2F</url>
    <content type="text"><![CDATA[--- title: 原型繼承篇 date: 2018-06-05 10:56:37 tags: - 筆記 --- 有一台車子 我們車子有什麼顏色的呢 黑色、白色、藍色、紅色....等 廠商做車子 不同顏色的差在烤漆 其他功能一樣 ~~有哪台同車款的車內部裝潢不一樣的~~ {% asset_img 1.jpg %} {% asset_img 2.jpg %} 當我們定義一個Function 當我們定義一個陣列 當我定義一個字串 Function它就繼承了祖先(原型)的方法 陣列也是 陣列有array各種方法 可以直接運用 Function->Function prototype->Object prototype arr->arr prototype->Array prototype 這樣一個一個串連找源頭 我們稱之為原型鏈(prototype chain) *** 舉例來講 這是一個貓咪的建構函式 function Cat(name) { this.name = name; this.say = function() { return `Hello, ${this.name}!`; } } var cat1 = new Cat("普通的貓"); 當我們使用建構函式時 創造一個貓咪的物件 它就是參考Cat.prototype的原型去作出一個物件 所有屬性也都被存在Cat.prototype裏頭 也就是 Cat----->Cat.prototype->Object proototype 當我們要調用說話方法時 console.log(cat1.say()); 貓咪正常說話 但是時常做的是 會把say()方法寫給原型 讓每次物件產生的時候 都參照這個原型 就會少產生需要的Function 像是底下這樣 function Cat(name) { this.name = name; } Cat.prototype.say = function() { return `Hello, ${this.name}!`; } var cat1 = new Cat("普通的貓"); 還記得前面講過的this嗎 這個this指向新產生的這個物件(普通的貓) 當我們想要賦予其它屬性時 就必須寫在Cat建構函式裡 如果像這樣 這是一隻不會飛的貓 function Cat(name) { this.name = name; } Cat.prototype.say = function() { return `Hello, ${this.name}!`; } Cat.skill = function(){ return "不會飛";}; var cat1 = new Cat("普通的貓"); console.log(cat1.skill()); // skill is not a function 當我們要用cat1.skill() 將會出現錯誤訊息 {% asset_img 3.jpg %} > 因為Cat本身只是用來產生物件用 > 所有的屬性參照 都是看原型 > 換句煥說 prototype屬性是看這個Cat函式包起來的東西 我們再新增一行 function Cat(name) { this.name = name; } Cat.prototype.say = function() { return `Hello, ${this.name}!`; } Cat.prototype.skill = function(){ return "不會飛";}; Cat.skill = function(){ return "可能不會飛";}; var cat1 = new Cat("普通的貓"); console.log(cat1.skill()); //不會飛 印證參照的是原型 直接寫給Cat是無效的 或者就直接寫在Cat建構函式裡頭 接下來讓我們創造一隻會飛的貓 {% asset_img 4.jpg %} 一樣是用建構函數開頭 function Cat(name) { this.name = name; } Cat.prototype.say = function() { return `Hello, ${this.name}!`; } Cat.prototype.skill = function(){ return "不會飛";}; var cat1 = new Cat("普通的貓"); function Happi() { Cat.call(this,"哈比");//我們調用Cat函式的方法給Happi } var cat2 = new Happi; console.log(cat2.skill());// is not a function 現在 Happi->Happi prototype->Cat->Cat prototype->Object prototype 也因為Happi沒寫skill方法而無法辨識 加上這一段 Happi.prototype.skill = function(){return "我會飛"}; 做出了一隻會飛的貓咪 大概的示意圖 {% asset_img 5.jpg %}]]></content>
      <tags>
        <tag>筆記</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[簡單講述this]]></title>
    <url>%2Fprofile%2F%E7%B0%A1%E5%96%AE%E8%AC%9B%E8%BF%B0this%2F</url>
    <content type="text"><![CDATA[--- title: 簡單講述this date: 2018-06-05 07:56:37 tags: - 筆記 --- this === 好熱.... {% asset_img 1.gif %} 今天來介紹這個在函式中很常使用到的關鍵字 它代表的意義不固定 視它出現的時機與環境而有改變 以一個簡單的範例為例 (詳細的教程在MDN WEB手冊有) function f1(){ return this; } f1(); 返回的會是什麼呢? . . . . . . window本身或undefined 什麼意思呢? 核心的概念就是 > 看調用他的是誰 在上面範例中 調用的是最外圍的全局環境 也就是window (但是要注意的是，如果使用use strict的嚴格模式 因為並非window直接調用 而會顯示為undefined) var obj = { birth: 1990, getAge: function () { var b = this.birth;// 1990 var fn = function () { return new Date().getFullYear() - this.birth; //this指向window或undefined }; return fn(); } }; 1. 上面的b是多少呢? 因為obj.getAge()會這樣調用 調用的物件是obj，也就是this指向obj 又obj.birth找找obj裏頭有這個屬性嗎? 有，找到了，1990這個值 2. 這裡的this指的又是誰? 由於被包起來 fn這個函式實際上是閉包 裏頭的變數是私有的(內部的，不會被外界影響) 可以看成是身在桃花源之中，它完全是一種獨立的存在 如果函數內部沒有birth這個屬性 它會找誰? 對，找最外面調用這個obj的window 那此時，birth的值是undefined 也就是進一步講 全局有定義birth的值，它就會試著去找 var birth = 1950; var obj = { birth: 1990, getAge: function () { var b = this.birth;// 1990 var fn = function () { return new Date().getFullYear() - this.birth; // 1950 }; return fn(); } }; 這樣對this有沒有比較清楚的認知呢? 好吧...我知道你現在的表情應該還是 {% asset_img 2.jpg %} *** 箭頭函數 === 以上面為例 箭頭函數是用來解決this指向的問題 var birth = 1950; var obj = { birth: 1990, getAge: function () { var b = this.birth;// 1990 var fn = () => { return new Date().getFullYear() - this.birth; // 1990 }; return fn(); } }; 我們可以看到在fn函數的部分被改動了一小段 this受限於詞法作用域的緣故(也就是先前提到的內部的私有變數) 此時這個this就跟b的this指向的對象同樣為obj 那麼， 如果getAge()這個屬性的函式也用了箭頭函數表示呢? var birth = 1950; var obj = { birth: 1990, getAge: () => { var b = this.birth;// 1990 var fn = () => { return new Date().getFullYear() - this.birth; // 1950 }; return fn(); } }; 那麼這個this已經沒有function包住它 又形成了封閉的局面 它再次去全局找是否有存在的birth被定義變數 最後來看一個簡單的小範例 function Person(first, last, age, eyecolor) { this.firstName = first; this.lastName = last; this.age = age; this.eyeColor = eyecolor; this.name = function() {return this.firstName + " " + this.lastName;}; } var myFather = new Person("John", "Doe", 50, "blue"); 這是一個建構函式為基礎產生一個新的物件myFather 那麼裏頭的this 會指向誰呢? 也就是說 當我們想要顯示myFather.firstName時會顯示什麼呢? John。 一直到eyeColor都沒有問題 如果我想知道Person.name 那this指向的就是調用這個name屬性的Person this.name的顯示結果應該就沒問題了 好了，簡單的this基礎介紹 > 最後做個總結 > 如果能了解this,對程式的撰寫上幫助不小]]></content>
      <tags>
        <tag>筆記</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正則表達式練習]]></title>
    <url>%2Fprofile%2F%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F%E7%B7%B4%E7%BF%92%2F</url>
    <content type="text"><![CDATA[--- title: 正則表達式練習 date: 2018-06-02 07:56:37 tags: - 筆記 --- img{max-width:300px;} 之前弄資料庫的時候 有碰到簡易的Regexp的表達 可以很容易的篩選出想要的結果 苦於那個時候急於速成 無法了解透徹 利用這段時間 了解一些基礎的應用 我的心如同壓扁的拉拉熊 {% asset_img 1.png %} 其中有提到以下的字串如何用正規式表達 var should_pass = ['someone@gmail.com', 'bill.gates@microsoft.com', 'tom@voyager.org', 'bob2015@163.com'] //應該要判斷成功 var should_fail = ['test#gmail.com', 'bill@microsoft', 'bill%gates@ms.com', '@voyager.org']; //應該要判斷失敗 答案有很多種(基於不同需求) > 第一個字串是最基本的電子郵件形式 以英文字母或數字為開頭 所以先 /^\w/ > 第二個是中間有一個點 但是我並不清楚.是否前面要加\來跳脫字元 好像有時候報錯 有時候可以 後面加了一個點 . 因為不只一個字符 所以到目前為止應該是 var re = /^\w.+/; 後面要接小老鼠以及英文字 變成 var re = /^\w.+@\w+/; > 綜合第二個跟第三個字串 >必須要.com 以及.org結尾 var re = /^\w.+@\w+.(com|org)$/; >以console.log(re.exec(should_pass)); >是通過的 但是檢測不應該通過的字串也要不能通過 第一個錯誤字串因為我們是用@開頭，所以不會通過 第二個錯誤字串因為我們後面接了.com或org，所以也不會通過 第四個因為我們以數字或字母為開頭，所以也不會通過 問題會發生在第三個字串 字符包括了%，必須過濾掉 [^要過濾的字符] 代表除了這個字符以外的會通過 所以這個時候 var rec = /^\w.[^%]+@\w+.(com|org)$/; 還有一題是分離提取字串 可以用()來分組 很方便吧! *** 其實我也不知道這樣對不對 讓我們來玩顏文字篩選符號吧 用全局搜索試試 只有三個字符的結果 需要注意的是正則表達式(^.....$)不能加 否則只會搜索到一個 var re = /\w{3}/g; var str = "owo OAO www QWQ (つ´ω`)つ A_A AwA d(`･∀･)b"; console.log(re.exec(str)); //顯示控制台測試看看 我等一下會變哦 點我修改上面區塊的內容 點我重設 var test_obj = { re: /\w{3}/g, str: "owo OAO www QWQ (つ´ω`)つ A_A AwA d(`･∀･)b", reset_word: document.getElementById("test").innerHTML, count: 0 }; function change() { if(test_obj.count == 0) { var count = test_obj.str.match(test_obj.re).length; document.getElementById("test").innerHTML = ""; for(var i=0;i]]></content>
      <tags>
        <tag>筆記</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[火焰累積傷害]]></title>
    <url>%2Fprofile%2F%E7%81%AB%E7%84%B0%E7%B4%AF%E7%A9%8D%E5%82%B7%E5%AE%B3%2F</url>
    <content type="text"><![CDATA[--- title: 火焰累積傷害 date: 2018-06-01 07:56:37 tags: - 遊戲註記 --- 看到了Generator的教程 一種累積性傷害的技能 似乎可以這樣計算~~(自己亂創)~~ 每回合next一次 雖然裏頭有提到可以跟AJAX配合使用 但是目前還是聽不太懂 目前的狀態 {% asset_img 1.jpg %} function* fire_status(max) { //製作一個產生器 var i = 0; var aaa = 0; while(i]]></content>
      <tags>
        <tag>遊戲註記</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工具的使用_截圖]]></title>
    <url>%2Fprofile%2F%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8_%E6%88%AA%E5%9C%96%2F</url>
    <content type="text"><![CDATA[--- title: 工具的使用_截圖 date: 2018-05-26 16:22:36 tags: - 工具 --- 本站第一篇文章 {% asset_img 1.png %} 今天要介紹截圖工具的使用 首先是截圖的使用方法 筆電與桌機 (筆電) Fn按著不放+右上角的PrintScreen(可能簡寫Ptrsc) {% asset_img 2.jpg 筆電鍵盤按法 %} (桌機) 桌機一般來說只要按住PrintScreen就行了 {% asset_img 3.jpg 桌機鍵盤按法 %} 那麼接下來做什麼呢? 到小畫家貼上就好 如果找不到小畫家呢? {% asset_img 4.jpg 小畫家位置 %} 剪貼簿貼上 或者你也能到擁有的繪圖軟體 如:Photoshop貼上圖片 它會使用剪貼簿的方式貼上圖片 例如我們今天截圖650*435Pixl的圖 你只需要開新檔案 它就會幫你開一個一樣長寬的剪貼簿 貼上的時候就是會符合圖片的大小 {% asset_img 5.jpg 剪貼簿貼上 %}]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工具的使用_截圖2]]></title>
    <url>%2Fprofile%2F%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8_%E6%88%AA%E5%9C%962%2F</url>
    <content type="text"><![CDATA[--- title: 工具的使用_截圖2 date: 2018-05-26 16:22:36 tags: - 工具 --- {% asset_img 0.jpg %} 繼上一章的工具的使用後 今天要介紹的是其他軟體的截圖工具 例如我們日常使用的通訊軟體 都有這個功能 {% asset_img 1.jpg %} *** LINE === 這是LINE不久前推出的功能 按下即可截圖 {% asset_img 2.gif %} *** QQ === 也有這個功能 快捷鍵是Ctrl+Alt+A {% asset_img 3.gif %} *** 最後介紹一個頗有知名度的剪輯軟體的公司 ApowerSoft === 這在Google搜尋都能夠找到 它做的這款截圖軟體 只要按下快捷鍵也能立即截圖 更能直接做簡易的編輯 {% asset_img 4.jpg %} 它的功能也更多 能夠用的工具也比較容易操作 這是目前筆者正在使用的截圖工具 有一段免費試用期 {% asset_img 5.gif %} 要注意的是 如果有同時用QQ通訊軟體 他們快捷鍵會衝突 需另外設置]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工具的使用_製作GIF]]></title>
    <url>%2Fprofile%2F%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8-%E8%A3%BD%E4%BD%9CGIF%2F</url>
    <content type="text"><![CDATA[--- title: 工具的使用_製作GIF date: 2018-05-26 07:56:37 tags: - 工具 --- {% asset_img 0.gif %} 現在來介紹 有時候我們簡短的滑鼠的一個MOVE動作 不想拍影片那麼費工 想要拍成GIF動圖 該怎麼做呢? *** {% asset_img 1.jpg GIF_Cam畫面 %} 使用方法為 {% asset_img 2.jpg GIF_Cam步驟 %} 框選的範圍不宜過大，會讓檔案大小也會變大 最後要注意的是 如果要拍下一張GIF時 要記得按New清除上一張的紀錄 PS.第一章圖就是沒有清空的下場 *** > 官方載點：https://gifcam.en.softonic.com/ > 備用載點: https://drive.google.com/open?id=1Gzj2N2FjB88acR7uK6WtA8kWQK6ZQBvv]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新的主題測試]]></title>
    <url>%2Fprofile%2F%E6%96%B0%E7%9A%84%E4%B8%BB%E9%A1%8C%E6%B8%AC%E8%A9%A6%2F</url>
    <content type="text"><![CDATA[--- title: 新的主題測試 date: 2018-05-05 16:22:36 tags: --- ~~貸款抓住促進數量伊拉克描述物品計算五年反覆娛樂房產下門口你，樣子人們採購動畫新聞網也，孤獨權限有一些當時開始促進輸出相當分享好友允許，。~~ ![aaa](/cardmonster/img/38401_1559808918821_2753383_n.jpg) ![aaa](/cardmonster/img/39359_124691630910608_812022_n.jpg) ![bbb](https://i.imgur.com/Xzqi180.gif) | Item|Value|Qty|QQQy| | :-------:| :----:| :----:|:---:| | Computer | $1600 | 5 | 5 | | Phone | $12 | 12 | 5 | | Pipe | $1 | 234 | 5 | > This is the first level of quoting. > > > This is nested blockquote. > > >Back to the first level. 1. This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. 2. Suspendisse id sem consectetuer libero luctus adipiscing. * A list item with a code block: *** 我是程式碼 This is [an example](http://example.com/ "Title") inline link. [This link](http://example.net/) has no title attribute. I get 10 times more traffic from [Google][] than from [Yahoo][] or [MSN][]. [google]: http://google.com/ "Google" [yahoo]: http://search.yahoo.com/ "Yahoo Search" [msn]: http://search.msn.com/ "MSN Search" Use the `printf()` function. A single backtick in a code span: `` ` `` A backtick-delimited string in a code span: `` `foo` `` -aaa]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fprofile%2Fjs%2Fskill.js</url>
    <content type="text"><![CDATA[$(function(){ $("a.skill_name").each(function(){ var text= $(this).text(); $(this).css("display","inline-block").css("color","blue") .attr("href","#"+text); }) $("h1:not(h1:first)").hover(function(){ //排除第一個標題的情況 var skill_name = $(this).text(); function note_word() //提醒文字 { var obj = document.createElement("span"); obj.style.background = "rgb(51,122,183)"; obj.style.color = "#fff"; obj.style.width = "300px"; obj.style.height = "25px"; obj.style.fontSize = "15px"; obj.style.marginLeft = "10px"; obj.style.textAlign = "center"; obj.textContent = "點擊查看擁有"+skill_name+"的卡片"; return obj; } $(this).append(note_word()); },function(){$(this).find("span").remove()} //滑鼠移開後移除 ) })]]></content>
  </entry>
  <entry>
    <title><![CDATA[tags]]></title>
    <url>%2Fprofile%2Ftags%2Findex.html</url>
    <content type="text"><![CDATA[--- title: tags date: 2018-05-08 14:41:53 type: tags ---]]></content>
  </entry>
  <entry>
    <title><![CDATA[分類搜尋]]></title>
    <url>%2Fprofile%2F%E5%88%86%E9%A1%9E%E6%90%9C%E5%B0%8B%2Findex.html</url>
    <content type="text"><![CDATA[--- title: 分類搜尋 date: 2018-05-08 14:47:13 type: categories ---]]></content>
  </entry>
  <entry>
    <title><![CDATA[關於]]></title>
    <url>%2Fprofile%2F%E9%97%9C%E6%96%BC%2Findex.html</url>
    <content type="text"><![CDATA[--- title: 關於 date: 2018-05-10 00:04:05 comments: false --- 世界上的每個人 就負責一座高塔就好了 希望我的文章也能幫到需要的人 恩，總會有人需要的]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fprofile%2Fjs%2Ffb.js</url>
    <content type="text"><![CDATA[window.fbAsyncInit = function() { FB.init({ appId : '369671153540598', xfbml : true, version : 'v3.0' }); FB.AppEvents.logPageView(); }; (function(d, s, id){ var js, fjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) {return;} js = d.createElement(s); js.id = id; js.src = "https://connect.facebook.net/en_US/sdk.js"; fjs.parentNode.insertBefore(js, fjs); }(document, 'script', 'facebook-jssdk'));]]></content>
  </entry>
</search>
