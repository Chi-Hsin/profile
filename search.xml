<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[原型繼承篇]]></title>
    <url>%2Fprofile%2F%E5%8E%9F%E5%9E%8B%E7%B9%BC%E6%89%BF%E7%AF%87%2F</url>
    <content type="text"><![CDATA[--- title: 原型繼承篇 date: 2018-06-05 10:56:37 tags: - 筆記 --- 有一台車子 我們車子有什麼顏色的呢 黑色、白色、藍色、紅色....等 廠商做車子 不同顏色的差在烤漆 其他功能一樣 ~~有哪台同車款的車內部裝潢不一樣的~~ {% asset_img 1.jpg %} {% asset_img 2.jpg %} 當我們定義一個Function 當我們定義一個陣列 當我定義一個字串 Function它就繼承了祖先(原型)的方法 陣列也是 陣列有array各種方法 可以直接運用 Function->Function prototype->Object prototype arr->arr prototype->Array prototype 這樣一個一個串連找源頭 我們稱之為原型鏈(prototype chain) *** 舉例來講 這是一個貓咪的建構函式 function Cat(name) { this.name = name; this.say = function() { return `Hello, ${this.name}!`; } } var cat1 = new Cat("普通的貓"); 當我們使用建構函式時 創造一個貓咪的物件 它就是參考Cat.prototype的原型去作出一個物件 所有屬性也都被存在Cat.prototype裏頭 也就是 Cat----->Cat.prototype->Object proototype 當我們要調用說話方法時 console.log(cat1.say()); 貓咪正常說話 但是時常做的是 會把say()方法寫給原型 讓每次物件產生的時候 都參照這個原型 就會少產生需要的Function 像是底下這樣 function Cat(name) { this.name = name; } Cat.prototype.say = function() { return `Hello, ${this.name}!`; } var cat1 = new Cat("普通的貓"); 還記得前面講過的this嗎 這個this指向新產生的這個物件(普通的貓) 當我們想要賦予其它屬性時 就必須寫在Cat建構函式裡 如果像這樣 這是一隻不會飛的貓 function Cat(name) { this.name = name; } Cat.prototype.say = function() { return `Hello, ${this.name}!`; } Cat.skill = function(){ return "不會飛";}; var cat1 = new Cat("普通的貓"); console.log(cat1.skill()); // skill is not a function 當我們要用cat1.skill() 將會出現錯誤訊息 {% asset_img 3.jpg %} > 因為Cat本身只是用來產生物件用 > 所有的屬性參照 都是看原型 > 換句煥說 prototype屬性是看這個Cat函式包起來的東西 我們再新增一行 function Cat(name) { this.name = name; } Cat.prototype.say = function() { return `Hello, ${this.name}!`; } Cat.prototype.skill = function(){ return "不會飛";}; Cat.skill = function(){ return "可能不會飛";}; var cat1 = new Cat("普通的貓"); console.log(cat1.skill()); //不會飛 印證參照的是原型 直接寫給Cat是無效的 或者就直接寫在Cat建構函式裡頭 接下來讓我們創造一隻會飛的貓 {% asset_img 4.jpg %} 一樣是用建構函數開頭 function Cat(name) { this.name = name; } Cat.prototype.say = function() { return `Hello, ${this.name}!`; } Cat.prototype.skill = function(){ return "不會飛";}; var cat1 = new Cat("普通的貓"); function Happi() { Cat.call(this,"哈比");//我們調用Cat函式的方法給Happi } var cat2 = new Happi; console.log(cat2.skill());// is not a function 現在 Happi->Happi prototype->Cat->Cat prototype->Object prototype 也因為Happi沒寫skill方法而無法辨識 加上這一段 Happi.prototype.skill = function(){return "我會飛"}; 做出了一隻會飛的貓咪 大概的示意圖 {% asset_img 5.jpg %}]]></content>
      <tags>
        <tag>筆記</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[簡單講述this]]></title>
    <url>%2Fprofile%2F%E7%B0%A1%E5%96%AE%E8%AC%9B%E8%BF%B0this%2F</url>
    <content type="text"><![CDATA[--- title: 簡單講述this date: 2018-06-05 07:56:37 tags: - 筆記 --- this === 好熱.... {% asset_img 1.gif %} 今天來介紹這個在函式中很常使用到的關鍵字 它代表的意義不固定 視它出現的時機與環境而有改變 以一個簡單的範例為例 (詳細的教程在MDN WEB手冊有) function f1(){ return this; } f1(); 返回的會是什麼呢? . . . . . . window本身或undefined 什麼意思呢? 核心的概念就是 > 看調用他的是誰 在上面範例中 調用的是最外圍的全局環境 也就是window (但是要注意的是，如果使用use strict的嚴格模式 因為並非window直接調用 而會顯示為undefined) var obj = { birth: 1990, getAge: function () { var b = this.birth;// 1990 var fn = function () { return new Date().getFullYear() - this.birth; //this指向window或undefined }; return fn(); } }; 1. 上面的b是多少呢? 因為obj.getAge()會這樣調用 調用的物件是obj，也就是this指向obj 又obj.birth找找obj裏頭有這個屬性嗎? 有，找到了，1990這個值 2. 這裡的this指的又是誰? 由於被包起來 fn這個函式實際上是閉包 裏頭的變數是私有的(內部的，不會被外界影響) 可以看成是身在桃花源之中，它完全是一種獨立的存在 如果函數內部沒有birth這個屬性 它會找誰? 對，找最外面調用這個obj的window 那此時，birth的值是undefined 也就是進一步講 全局有定義birth的值，它就會試著去找 var birth = 1950; var obj = { birth: 1990, getAge: function () { var b = this.birth;// 1990 var fn = function () { return new Date().getFullYear() - this.birth; // 1950 }; return fn(); } }; 這樣對this有沒有比較清楚的認知呢? 好吧...我知道你現在的表情應該還是 {% asset_img 2.jpg %} *** 箭頭函數 === 以上面為例 箭頭函數是用來解決this指向的問題 var birth = 1950; var obj = { birth: 1990, getAge: function () { var b = this.birth;// 1990 var fn = () => { return new Date().getFullYear() - this.birth; // 1990 }; return fn(); } }; 我們可以看到在fn函數的部分被改動了一小段 this受限於詞法作用域的緣故(也就是先前提到的內部的私有變數) 此時這個this就跟b的this指向的對象同樣為obj 那麼， 如果getAge()這個屬性的函式也用了箭頭函數表示呢? var birth = 1950; var obj = { birth: 1990, getAge: () => { var b = this.birth;// 1990 var fn = () => { return new Date().getFullYear() - this.birth; // 1950 }; return fn(); } }; 那麼這個this已經沒有function包住它 又形成了封閉的局面 它再次去全局找是否有存在的birth被定義變數 最後來看一個簡單的小範例 function Person(first, last, age, eyecolor) { this.firstName = first; this.lastName = last; this.age = age; this.eyeColor = eyecolor; this.name = function() {return this.firstName + " " + this.lastName;}; } var myFather = new Person("John", "Doe", 50, "blue"); 這是一個建構函式為基礎產生一個新的物件myFather 那麼裏頭的this 會指向誰呢? 也就是說 當我們想要顯示myFather.firstName時會顯示什麼呢? John。 一直到eyeColor都沒有問題 如果我想知道Person.name 那this指向的就是調用這個name屬性的Person this.name的顯示結果應該就沒問題了 好了，簡單的this基礎介紹 > 最後做個總結 > 如果能了解this,對程式的撰寫上幫助不小]]></content>
      <tags>
        <tag>筆記</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正則表達式練習]]></title>
    <url>%2Fprofile%2F%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F%E7%B7%B4%E7%BF%92%2F</url>
    <content type="text"><![CDATA[--- title: 正則表達式練習 date: 2018-06-02 07:56:37 tags: - 筆記 --- img{max-width:300px;} 之前弄資料庫的時候 有碰到簡易的Regexp的表達 可以很容易的篩選出想要的結果 苦於那個時候急於速成 無法了解透徹 利用這段時間 了解一些基礎的應用 我的心如同壓扁的拉拉熊 {% asset_img 1.png %} 其中有提到以下的字串如何用正規式表達 var should_pass = ['someone@gmail.com', 'bill.gates@microsoft.com', 'tom@voyager.org', 'bob2015@163.com'] //應該要判斷成功 var should_fail = ['test#gmail.com', 'bill@microsoft', 'bill%gates@ms.com', '@voyager.org']; //應該要判斷失敗 答案有很多種(基於不同需求) > 第一個字串是最基本的電子郵件形式 以英文字母或數字為開頭 所以先 /^\w/ > 第二個是中間有一個點 但是我並不清楚.是否前面要加\來跳脫字元 好像有時候報錯 有時候可以 後面加了一個點 . 因為不只一個字符 所以到目前為止應該是 var re = /^\w.+/; 後面要接小老鼠以及英文字 變成 var re = /^\w.+@\w+/; > 綜合第二個跟第三個字串 >必須要.com 以及.org結尾 var re = /^\w.+@\w+.(com|org)$/; >以console.log(re.exec(should_pass)); >是通過的 但是檢測不應該通過的字串也要不能通過 第一個錯誤字串因為我們是用@開頭，所以不會通過 第二個錯誤字串因為我們後面接了.com或org，所以也不會通過 第四個因為我們以數字或字母為開頭，所以也不會通過 問題會發生在第三個字串 字符包括了%，必須過濾掉 [^要過濾的字符] 代表除了這個字符以外的會通過 所以這個時候 var rec = /^\w.[^%]+@\w+.(com|org)$/; 還有一題是分離提取字串 可以用()來分組 很方便吧! *** 其實我也不知道這樣對不對 讓我們來玩顏文字篩選符號吧 用全局搜索試試 只有三個字符的結果 需要注意的是正則表達式(^.....$)不能加 否則只會搜索到一個 var re = /\w{3}/g; var str = "owo OAO www QWQ (つ´ω`)つ A_A AwA d(`･∀･)b"; console.log(re.exec(str)); //顯示控制台測試看看 我等一下會變哦 點我修改上面區塊的內容 點我重設 var test_obj = { re: /\w{3}/g, str: "owo OAO www QWQ (つ´ω`)つ A_A AwA d(`･∀･)b", reset_word: document.getElementById("test").innerHTML, count: 0 }; function change() { if(test_obj.count == 0) { var count = test_obj.str.match(test_obj.re).length; document.getElementById("test").innerHTML = ""; for(var i=0;i]]></content>
      <tags>
        <tag>筆記</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[火焰累積傷害]]></title>
    <url>%2Fprofile%2F%E7%81%AB%E7%84%B0%E7%B4%AF%E7%A9%8D%E5%82%B7%E5%AE%B3%2F</url>
    <content type="text"><![CDATA[--- title: 火焰累積傷害 date: 2018-06-01 07:56:37 tags: - 遊戲註記 --- 看到了Generator的教程 一種累積性傷害的技能 似乎可以這樣計算~~(自己亂創)~~ 每回合next一次 雖然裏頭有提到可以跟AJAX配合使用 但是目前還是聽不太懂 目前的狀態 {% asset_img 1.jpg %} function* fire_status(max) { //製作一個產生器 var i = 0; var aaa = 0; while(i]]></content>
      <tags>
        <tag>遊戲註記</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工具的使用_截圖2]]></title>
    <url>%2Fprofile%2F%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8_%E6%88%AA%E5%9C%962%2F</url>
    <content type="text"><![CDATA[--- title: 工具的使用_截圖2 date: 2018-05-26 16:22:36 tags: - 工具 --- {% asset_img 0.jpg %} 繼上一章的工具的使用後 今天要介紹的是其他軟體的截圖工具 例如我們日常使用的通訊軟體 都有這個功能 {% asset_img 1.jpg %} *** LINE === 這是LINE不久前推出的功能 按下即可截圖 {% asset_img 2.gif %} *** QQ === 也有這個功能 快捷鍵是Ctrl+Alt+A {% asset_img 3.gif %} *** 最後介紹一個頗有知名度的剪輯軟體的公司 ApowerSoft === 這在Google搜尋都能夠找到 它做的這款截圖軟體 只要按下快捷鍵也能立即截圖 更能直接做簡易的編輯 {% asset_img 4.jpg %} 它的功能也更多 能夠用的工具也比較容易操作 這是目前筆者正在使用的截圖工具 有一段免費試用期 {% asset_img 5.gif %} 要注意的是 如果有同時用QQ通訊軟體 他們快捷鍵會衝突 需另外設置]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工具的使用_截圖]]></title>
    <url>%2Fprofile%2F%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8_%E6%88%AA%E5%9C%96%2F</url>
    <content type="text"><![CDATA[--- title: 工具的使用_截圖 date: 2018-05-26 16:22:36 tags: - 工具 --- 本站第一篇文章 {% asset_img 1.png %} 今天要介紹截圖工具的使用 首先是截圖的使用方法 筆電與桌機 (筆電) Fn按著不放+右上角的PrintScreen(可能簡寫Ptrsc) {% asset_img 2.jpg 筆電鍵盤按法 %} (桌機) 桌機一般來說只要按住PrintScreen就行了 {% asset_img 3.jpg 桌機鍵盤按法 %} 那麼接下來做什麼呢? 到小畫家貼上就好 如果找不到小畫家呢? {% asset_img 4.jpg 小畫家位置 %} 剪貼簿貼上 或者你也能到擁有的繪圖軟體 如:Photoshop貼上圖片 它會使用剪貼簿的方式貼上圖片 例如我們今天截圖650*435Pixl的圖 你只需要開新檔案 它就會幫你開一個一樣長寬的剪貼簿 貼上的時候就是會符合圖片的大小 {% asset_img 5.jpg 剪貼簿貼上 %}]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工具的使用_製作GIF]]></title>
    <url>%2Fprofile%2F%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8-%E8%A3%BD%E4%BD%9CGIF%2F</url>
    <content type="text"><![CDATA[--- title: 工具的使用_製作GIF date: 2018-05-26 07:56:37 tags: - 工具 --- {% asset_img 0.gif %} 現在來介紹 有時候我們簡短的滑鼠的一個MOVE動作 不想拍影片那麼費工 想要拍成GIF動圖 該怎麼做呢? *** {% asset_img 1.jpg GIF_Cam畫面 %} 使用方法為 {% asset_img 2.jpg GIF_Cam步驟 %} 框選的範圍不宜過大，會讓檔案大小也會變大 最後要注意的是 如果要拍下一張GIF時 要記得按New清除上一張的紀錄 PS.第一章圖就是沒有清空的下場 *** > 官方載點：https://gifcam.en.softonic.com/ > 備用載點: https://drive.google.com/open?id=1Gzj2N2FjB88acR7uK6WtA8kWQK6ZQBvv]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新的主題測試]]></title>
    <url>%2Fprofile%2F%E6%96%B0%E7%9A%84%E4%B8%BB%E9%A1%8C%E6%B8%AC%E8%A9%A6%2F</url>
    <content type="text"><![CDATA[--- title: 新的主題測試 date: 2018-05-05 16:22:36 tags: --- ~~貸款抓住促進數量伊拉克描述物品計算五年反覆娛樂房產下門口你，樣子人們採購動畫新聞網也，孤獨權限有一些當時開始促進輸出相當分享好友允許，。~~ ![aaa](/cardmonster/img/38401_1559808918821_2753383_n.jpg) ![aaa](/cardmonster/img/39359_124691630910608_812022_n.jpg) ![bbb](https://i.imgur.com/Xzqi180.gif) | Item|Value|Qty|QQQy| | :-------:| :----:| :----:|:---:| | Computer | $1600 | 5 | 5 | | Phone | $12 | 12 | 5 | | Pipe | $1 | 234 | 5 | > This is the first level of quoting. > > > This is nested blockquote. > > >Back to the first level. 1. This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. 2. Suspendisse id sem consectetuer libero luctus adipiscing. * A list item with a code block: *** 我是程式碼 This is [an example](http://example.com/ "Title") inline link. [This link](http://example.net/) has no title attribute. I get 10 times more traffic from [Google][] than from [Yahoo][] or [MSN][]. [google]: http://google.com/ "Google" [yahoo]: http://search.yahoo.com/ "Yahoo Search" [msn]: http://search.msn.com/ "MSN Search" Use the `printf()` function. A single backtick in a code span: `` ` `` A backtick-delimited string in a code span: `` `foo` `` -aaa]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fprofile%2Fjs%2Fskill.js</url>
    <content type="text"><![CDATA[$(function(){ $("a.skill_name").each(function(){ var text= $(this).text(); $(this).css("display","inline-block").css("color","blue") .attr("href","#"+text); }) $("h1:not(h1:first)").hover(function(){ //排除第一個標題的情況 var skill_name = $(this).text(); function note_word() //提醒文字 { var obj = document.createElement("span"); obj.style.background = "rgb(51,122,183)"; obj.style.color = "#fff"; obj.style.width = "300px"; obj.style.height = "25px"; obj.style.fontSize = "15px"; obj.style.marginLeft = "10px"; obj.style.textAlign = "center"; obj.textContent = "點擊查看擁有"+skill_name+"的卡片"; return obj; } $(this).append(note_word()); },function(){$(this).find("span").remove()} //滑鼠移開後移除 ) })]]></content>
  </entry>
  <entry>
    <title><![CDATA[tags]]></title>
    <url>%2Fprofile%2Ftags%2Findex.html</url>
    <content type="text"><![CDATA[--- title: tags date: 2018-05-08 14:41:53 type: tags ---]]></content>
  </entry>
  <entry>
    <title><![CDATA[分類搜尋]]></title>
    <url>%2Fprofile%2F%E5%88%86%E9%A1%9E%E6%90%9C%E5%B0%8B%2Findex.html</url>
    <content type="text"><![CDATA[--- title: 分類搜尋 date: 2018-05-08 14:47:13 type: categories ---]]></content>
  </entry>
  <entry>
    <title><![CDATA[關於]]></title>
    <url>%2Fprofile%2F%E9%97%9C%E6%96%BC%2Findex.html</url>
    <content type="text"><![CDATA[--- title: 關於 date: 2018-05-10 00:04:05 comments: false --- 世界上的每個人 就負責一座高塔就好了 希望我的文章也能幫到需要的人 恩，總會有人需要的]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fprofile%2Fjs%2Ffb.js</url>
    <content type="text"><![CDATA[window.fbAsyncInit = function() { FB.init({ appId : '369671153540598', xfbml : true, version : 'v3.0' }); FB.AppEvents.logPageView(); }; (function(d, s, id){ var js, fjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) {return;} js = d.createElement(s); js.id = id; js.src = "https://connect.facebook.net/en_US/sdk.js"; fjs.parentNode.insertBefore(js, fjs); }(document, 'script', 'facebook-jssdk'));]]></content>
  </entry>
</search>
